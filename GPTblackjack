
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
<!--
Created using JS Bin
http://jsbin.com

Copyright (c) 2024 by anonymous (http://jsbin.com/bevekorene/1/edit)

Released under the MIT license: http://jsbin.mit-license.org
-->
<meta name="robots" content="noindex">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Online Blackjack</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            background-color: #2c3e50;
            color: #ecf0f1;
            background: radial-gradient(circle, #2c3e50 0%, #1a252f 100%);
        }
        .game-container {
            width: 600px;
            padding: 20px;
            background-color: #2b6e3e;
            border-radius: 10px;
            text-align: center;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
        }
        .cards {
            display: flex;
            justify-content: center;
            margin: 10px 0;
        }
        .card {
            width: 60px;
            height: 90px;
            border-radius: 5px;
            background-color: white;
            border: 1px solid #000;
            margin: 0 5px;
            position: relative;
        }
        .card-value {
            position: absolute;
            top: 5px;
            left: 5px;
            font-size: 18px;
            font-weight: bold;
        }
        .card-suit {
            position: absolute;
            bottom: 5px;
            right: 5px;
            font-size: 18px;
        }
        .red {
            color: red;
        }
        .black {
            color: black;
        }
        .buttons {
            margin-top: 10px;
        }
        button {
            padding: 10px;
            margin: 5px;
            background-color: #1abc9c;
            border: none;
            border-radius: 5px;
            color: white;
            cursor: pointer;
        }
        button:hover {
            background-color: #16a085;
        }
        #message {
            margin-top: 10px;
            font-size: 1.2em;
        }
        .hidden {
            display: none;
        }
    </style>
</head>
<body>
    <div class="game-container">
        <h1>Blackjack</h1>
        <div>
            <label for="bet-amount">Bet Amount:</label>
            <input type="number" id="bet-amount" min="1" max="100" value="10">
            <button id="confirm-bet-button">Confirm Bet</button>
        </div>
        <div class="hidden" id="game-area">
            <div>
                <p>Your Cards:</p>
                <div id="player-cards" class="cards"></div>
                <p>Your Score: <span id="player-score"></span></p>
            </div>
            <div>
                <p>Dealer's Cards:</p>
                <div id="dealer-cards" class="cards"></div>
                <p>Dealer's Score: <span id="dealer-score"></span></p>
            </div>
            <div class="buttons">
                <button id="hit-button">Hit</button>
                <button id="stay-button">Stay</button>
                <button id="replay-button" class="hidden">Replay</button>
            </div>
            <div id="message" class="hidden"></div>
            <p>Your Chips: <span id="chips">100</span></p>
        </div>
    </div>

    <script src="blackjack.js"></script>
<script>
document.addEventListener('DOMContentLoaded', function () {
    const hitButton = document.getElementById('hit-button');
    const stayButton = document.getElementById('stay-button');
    const replayButton = document.getElementById('replay-button');
    const confirmBetButton = document.getElementById('confirm-bet-button');
    const betAmountInput = document.getElementById('bet-amount');
    const playerCardsDiv = document.getElementById('player-cards');
    const dealerCardsDiv = document.getElementById('dealer-cards');
    const playerScoreSpan = document.getElementById('player-score');
    const dealerScoreSpan = document.getElementById('dealer-score');
    const chipsSpan = document.getElementById('chips');
    const messageDiv = document.getElementById('message');
    const gameArea = document.getElementById('game-area');

    let chips = 100;
    let playerCards = [];
    let dealerCards = [];
    let playerScore = 0;
    let dealerScore = 0;
    let gameOver = false;
    let betAmount = 0;

    const cardSuits = ['♠', '♥', '♣', '♦'];
    const cardValues = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K'];

    function initializeGame() {
        playerCards = [];
        dealerCards = [];
        playerScore = 0;
        dealerScore = 0;
        gameOver = false;
        messageDiv.classList.add('hidden');
        replayButton.classList.add('hidden');
        gameArea.classList.add('hidden');
        updateDisplay();
    }

    function startGame() {
        dealCard(playerCards);
        dealCard(playerCards);
        dealCard(dealerCards);
        dealCard(dealerCards);
        updateScores();
        updateDisplay();
        gameArea.classList.remove('hidden');
        if (playerScore === 21) {
            endGame(true);
        }
    }

    function dealCard(hand) {
        const card = {
            value: Math.floor(Math.random() * 13) + 1,
            suit: cardSuits[Math.floor(Math.random() * 4)]
        };
        hand.push(card);
    }

    function updateScores() {
        playerScore = calculateScore(playerCards);
        dealerScore = calculateScore(dealerCards);
    }

    function calculateScore(hand) {
        let score = 0;
        let hasAce = false;
        hand.forEach(card => {
            if (card.value > 10) {
                score += 10;
            } else if (card.value === 1) {
                hasAce = true;
                score += 11;
            } else {
                score += card.value;
            }
        });
        if (score > 21 && hasAce) {
            score -= 10;
        }
        return score;
    }

    function updateDisplay() {
        playerCardsDiv.innerHTML = '';
        dealerCardsDiv.innerHTML = '';

        playerCards.forEach(card => {
            const cardElement = createCardElement(card);
            playerCardsDiv.appendChild(cardElement);
        });

        dealerCards.forEach((card, index) => {
            const cardElement = createCardElement(card, gameOver || index === 0);
            dealerCardsDiv.appendChild(cardElement);
        });

        playerScoreSpan.textContent = playerScore;
        dealerScoreSpan.textContent = gameOver ? dealerScore : 'X';
        chipsSpan.textContent = chips;
    }

    function createCardElement(card, show = true) {
        const cardElement = document.createElement('div');
        cardElement.classList.add('card');
        if (show) {
            const valueElement = document.createElement('div');
            valueElement.classList.add('card-value');
            valueElement.textContent = cardValues[card.value - 1];
            const suitElement = document.createElement('div');
            suitElement.classList.add('card-suit');
            suitElement.textContent = card.suit;
            cardElement.appendChild(valueElement);
            cardElement.appendChild(suitElement);

            if (card.suit === '♥' || card.suit === '♦') {
                valueElement.classList.add('red');
                suitElement.classList.add('red');
            } else {
                valueElement.classList.add('black');
                suitElement.classList.add('black');
            }
        } else {
            cardElement.style.backgroundColor = '#2c3e50';
        }
        return cardElement;
    }

    function endGame(playerWon) {
        gameOver = true;
        replayButton.classList.remove('hidden');
        if (playerWon) {
            if (playerScore === 21 && playerCards.length === 2) {
                chips += betAmount * 2;
                showMessage('Blackjack! You win double!');
            } else {
                chips += betAmount;
                showMessage('You win!');
            }
        } else {
            chips -= betAmount;
            if (chips <= 0) {
                showMessage('Game Over, Go HOME!');
                chips = 0;
            } else {
                showMessage('You lose.');
            }
        }
        updateDisplay();
    }

    function showMessage(message) {
        messageDiv.textContent = message;
        messageDiv.classList.remove('hidden');
    }

    hitButton.addEventListener('click', () => {
        if (gameOver) return;
        dealCard(playerCards);
        updateScores();
        updateDisplay();
        if (playerScore > 21) {
            showMessage('BOOM!');
            endGame(false);
        }
    });

    stayButton.addEventListener('click', () => {
        if (gameOver) return;
        while (dealerScore < 17) {
            dealCard(dealerCards);
            updateScores();
        }
        if (dealerScore > 21 || dealerScore < playerScore) {
            endGame(true);
        } else {
            endGame(false);
        }
    });

    replayButton.addEventListener('click', () => {
        initializeGame();
    });

    confirmBetButton.addEventListener('click', () => {
        betAmount = parseInt(betAmountInput.value) || 10;
        if (betAmount > chips) {
            betAmount = chips;
        }
        startGame();
    });

    initializeGame();
});
</script>
<script src="https://static.jsbin.com/js/render/edit.js?4.1.8"></script>
<script>jsbinShowEdit && jsbinShowEdit({"static":"https://static.jsbin.com","root":"https://jsbin.com"});</script>
<script>
(function(i,s,o,g,r,a,m){i['GoogleAnalyticsObject']=r;i[r]=i[r]||function(){
  (i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),
  m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;m.parentNode.insertBefore(a,m)
  })(window,document,'script','https://www.google-analytics.com/analytics.js','ga');

ga('create', 'UA-1656750-34', 'auto');
ga('require', 'linkid', 'linkid.js');
ga('require', 'displayfeatures');
ga('send', 'pageview');

</script>

</body>
</html>
